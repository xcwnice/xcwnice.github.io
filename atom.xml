<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>findway</title>
  
  
  <link href="http://xcwnice.github.io/atom.xml" rel="self"/>
  
  <link href="http://xcwnice.github.io/"/>
  <updated>2022-04-06T08:33:54.362Z</updated>
  <id>http://xcwnice.github.io/</id>
  
  <author>
    <name>xcw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux和windows下内核socket优化项</title>
    <link href="http://xcwnice.github.io/2022/04/06/%E9%9B%B6%E7%A2%8E%E7%82%B9/Linux%E5%92%8Cwindows%E4%B8%8B%E5%86%85%E6%A0%B8socket%E4%BC%98%E5%8C%96%E9%A1%B9/"/>
    <id>http://xcwnice.github.io/2022/04/06/%E9%9B%B6%E7%A2%8E%E7%82%B9/Linux%E5%92%8Cwindows%E4%B8%8B%E5%86%85%E6%A0%B8socket%E4%BC%98%E5%8C%96%E9%A1%B9/</id>
    <published>2022-04-06T01:31:34.000Z</published>
    <updated>2022-04-06T08:33:54.362Z</updated>
    
    <content type="html"><![CDATA[<h1>Linux和windows下内核socket优化项</h1><div class="note info flat"><p>可能能为无法修改的wsl1的tcp内核优化</p></div><h2 id="Linux">Linux</h2><p>vi /etc/sysctl.conf<br>net.core.netdev_max_backlog = 30000  每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目</p><p>net.core.somaxconn = 262144   用来限制监听(LISTEN)队列最大数据包的数量，超过这个数量就会导致链接超时或者触发重传机制<br>net.core.rmem_default = 8388608    接收套接字缓冲区大小的默认值(以字节为单位)<br>net.core.wmem_default = 8388608    发送套接字缓冲区大小的默认值(以字节为单位)<br>net.core.rmem_max=16777216    接收套接字缓冲区大小的最大值(以字节为单位)<br>net.core.wmem_max=16777216    发送套接字缓冲区大小的最大值(以字节为单位)<br>net.ipv4.ip_local_port_range = 1024 65536    用于向外连接的端口范围<br>net.ipv4.tcp_mem = 786432 1048576 1572864    确定 TCP 栈应该如何反映内存使用，此处分别为3G、4G、6G；每个值的单位都是内存页（通常是 4KB）。第一个值是内存使用的下限。第二个值是内存压力模式开始对缓冲区使用应用压力的上限。第三个值是内存上限。在这个层次上可以将报文丢弃，从而减少对内存的使用。<br>net.ipv4.tcp_rmem=4096 87380 16777216    TCP接收缓冲区，3个字段分别是min，default，max。Min：为TCP socket预留用于接收缓冲的内存数量，即使在内存出现紧张情况下TCP socket都至少会有这么多数量的内存用于接收缓冲。<br>　　Default： 为TCP socket预留用于接收缓冲的内存数量，默认情况下该值影响其它协议使用的 net.core.wmem中default的值。该值决定了 在tcp_adv_win_scale、tcp_app_win和tcp_app_win的 默认值情况下，TCP 窗口大小为65535。<br>　　Max：为TCP socket预留用于接收缓冲的内存最大值。该值不会影响 net.core.wmem中max的值<br>net.ipv4.tcp_wmem=4096 65536 16777216    TCP发送缓冲区，3个字段分别是min，default，max。Min：为TCP socket预留用于发送缓冲的内存最小值。每个TCP socket都可以使用它。<br>　　Default：为TCP socket预留用于发送缓冲的内存数量，默认情况下该值会影响其它协议使用的net.core.wmem中default的 值，一般要低于net.core.wmem中default的值。<br>　　Max：为TCP socket预留用于发送缓冲的内存最大值。该值不会影响net.core.wmem_max<br>net.ipv4.tcp_fin_timeout = 10    如果套接字由本端要求关闭，这个参数决定了它保持在FIN-WAIT-2状态的时间。对端可以出错并永远不关闭连接，甚至意外当机。缺省值是60 秒<br>net.ipv4.tcp_tw_recycle = 1   开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭<br>net.ipv4.tcp_tw_reuse = 1    表示是否允许重新应用处于TIME-WAIT状态的socket用于新的TCP连接。<br>net.ipv4.tcp_max_tw_buckets = 6000    系统在同时所处理的最大timewait sockets 数目。如果超过此数的话，time-wait socket 会被立即砍除并且显示警告信息。之所以要设定这个限制，纯粹为了抵御那些简单的 DoS 攻击，千万不要人为的降低这个限制，不过，如果网络条件需要比默认值更多，则可以提高它(或许还要增加内存)<br>net.ipv4.tcp_timestamps = 0   时间戳可以避免序列号的卷绕。一个1Gbps 的链路肯定会遇到以前用过的序列号。时间戳能够让内核接受这种“异常”的数据包。这里需要将其关掉。<br>net.ipv4.tcp_window_scaling = 1   支持更大的TCP窗口. 如果TCP窗口最大超过65535(64KB), 必须设置该数值为1。<br>net.ipv4.tcp_sack = 1    表示是否启用有选择的应答（Selective Acknowledgment），这可以通过有选择地应答乱序接收到的报文来提高性能（这样可以让发送者只发送丢失的报文段）；（对于广域网通信来说）这个选项应该启用，但是这会增加对 CPU 的占用<br>net.ipv4.tcp_no_metrics_save=1    默认情况下一个tcp连接关闭后,把这个连接曾经有的参数比如慢启动门限snd_sthresh,拥塞窗口snd_cwnd 还有srtt等信息保存到dst_entry中, 只要dst_entry 没有失效,下次新建立相同连接的时候就可以使用保存的参数来初始化这个连接.通常情况下是关闭的。<br>net.ipv4.tcp_keepalive_time = 1200   当keepalive起用的时候，TCP发送keepalive消息的频度。缺省是2小时，改为20分钟<br>net.ipv4.tcp_syncookies = 1  当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭<br>net.ipv4.tcp_max_orphans = 262144    系统中最多有多少个TCP 套接字不被关联到任何一个用户文件句柄上。如果超过这个数字，孤儿连接将即刻被复位并打印出警告信息。这个限制仅仅是为了防止简单的DoS 攻击，不能过分依靠它或者人为地减小这个值，更应该增加这个值(如果增加了内存之后)。<br>net.ipv4.tcp_max_syn_backlog = 262144   表示那些尚未收到客户端确认信息的连接（SYN消息）队列的长度，默认为1024，加大队列长度为262144，可以容纳更多等待连接的网络连接数。<br>net.ipv4.tcp_synack_retries = 2    为了打开对端的连接，内核需要发送一个SYN 并附带一个回应前面一个SYN 的ACK。也就是所谓三次握手中的第二次握手。这个设置决定了内核放弃连接之前发送SYN+ACK 包的数量。<br>net.ipv4.tcp_syn_retries = 2    在内核放弃建立连接之前发送SYN 包的数量</p><p>web服务器收到了大量的连接，在启用了iptables的情况下，iptables会把所有的连接都做链接跟踪处理，这样iptables就会有一个链接跟踪表<br>net.ipv4.netfilter.ip_conntrack_tcp_timeout_established=1800   链接跟踪表保存时间，单位：秒<br>net.ipv4.netfilter.ip_conntrack_max=131070   链接跟踪表最大数目</p><p>kernel.sysrq = 0    允许按住Alt + PrtSc键打印内核信息，除非是调试，一般要关闭此功能<br>kernel.core_uses_pid = 1    控制core文件的文件名中是否添加pid作为扩展。文件内容为1，表示添加pid作为扩展名，生成的core文件格式为core.xxxx；为0则表示生成的core文件同一命名为core<br>kernel.msgmnb = 65536    每个消息队列的最大字节限制。<br>kernel.msgmax = 65536    从一个进程发送到另一个进程的消息的最大长度（bytes）。进程间的消息传递是在内核的内存中进行的，不会交换到磁盘上，所以如果增加该值，则将增加操作系统所使用的内存数量。<br>kernel.shmmax = 68719476736    表示内核所允许的最大共享内存段的大小（bytes）<br>kernel.shmall = 4294967296    系统上可以使用的共享内存的总量（bytes）<br>kernel.randomize_va_space = 1    将该值设置为 0 可禁用地址空间布局随机化。DB2 数据服务器依赖特定共享内存对象的固定地址，地址空间布局随机化会导致有些活动发生错误<br>net.ipv4.ip_forward = 0    0表示禁用 IPv4 包转送<br>net.ipv4.neigh.default.gc_stale_time=120    ARP参数，检查一次相邻层记录的有效性的周期。当相邻层记录失效时，将在给它发送数据前，再解析一次。缺省值是60秒。<br>net.ipv4.conf.all.rp_filter=0<br>net.ipv4.conf.all.arp_announce=2<br>net.ipv4.conf.lo.arp_announce=2</p><p>以下命令使内核参数生效：<br>/sbin/sysctl -p 生效<br>/sbin/sysctl -a | grep net.core.netdev_max_backlog 查看</p><p>完整的参数列表：</p><p>net.core.netdev_max_backlog = 30000<br>net.core.somaxconn = 262144<br>net.core.rmem_default = 8388608<br>net.core.wmem_default = 8388608<br>net.core.rmem_max=16777216<br>net.core.wmem_max=16777216<br>net.ipv4.ip_local_port_range = 1024 65536<br>net.ipv4.tcp_mem = 786432 1048576 1572864<br>net.ipv4.tcp_rmem=4096 87380 16777216<br>net.ipv4.tcp_wmem=4096 65536 16777216<br>net.ipv4.tcp_fin_timeout = 10<br>net.ipv4.tcp_tw_recycle = 1<br>net.ipv4.tcp_tw_reuse = 1<br>net.ipv4.tcp_max_tw_buckets = 6000<br>net.ipv4.tcp_timestamps = 0<br>net.ipv4.tcp_window_scaling = 1<br>net.ipv4.tcp_sack = 1<br>net.ipv4.tcp_no_metrics_save=1<br>net.ipv4.tcp_keepalive_time = 1200<br>net.ipv4.tcp_syncookies = 1<br>net.ipv4.tcp_max_orphans = 262144<br>net.ipv4.tcp_max_syn_backlog = 262144<br>net.ipv4.tcp_synack_retries = 2<br>net.ipv4.tcp_syn_retries = 2<br>net.ipv4.netfilter.ip_conntrack_tcp_timeout_established=1800<br>net.ipv4.netfilter.ip_conntrack_max=131070</p><p>kernel.sysrq = 0<br>kernel.core_uses_pid = 1<br>kernel.msgmnb = 65536<br>kernel.msgmax = 65536<br>kernel.shmmax = 68719476736<br>kernel.shmall = 4294967296<br>kernel.randomize_va_space = 1<br>kernel.exec-shield = 1<br>net.ipv4.ip_forward = 0<br>net.ipv4.neigh.default.gc_stale_time=120<br>net.ipv4.conf.default.accept_source_route = 0<br>net.ipv4.conf.default.rp_filter=0<br>net.ipv4.conf.all.rp_filter=0<br>net.ipv4.conf.all.arp_announce=2<br>net.ipv4.conf.lo.arp_announce=2</p><p>如果出现error: “net.ipv4.netfilter.ip_conntrack_max” is an unknown key</p><p>执行下面的命令加载对应模块：</p><p>modprobe ip_conntrack<br>lsmod |grep conn – if you see entries it means modules have been loaded correctly<br>sysctl -w – to write the changes you made under /etc/sysctl.conf<br>sysctl -p – to view the changes and see if it was actually loaded.<br>还不行，把net.ipv4.netfilter.ip_conntrack_max替换为：</p><p>net.nf_conntrack_max = 131070试试看</p><p>除了调整内核参数，还需 调整文件数：</p><p>linux系统优化完网络必须调高系统允许打开的文件数才能支持大的并发，默认1024是远远不够的。<br>查看进程占用的文件句柄数; lsof -n |awk ‘{print $2}’|sort|uniq -c |sort -nr|more       其中第一行是打开的文件句柄数量，第二行是进程号</p><p>执行Shell命令：<br>echo ulimit -HSn 65536 &gt;&gt; /etc/rc.local<br>echo ulimit -HSn 65536 &gt;&gt;/root/.bash_profile<br>ulimit -HSn 65536</p><p>如果要sudo执行时，使用：sudo sh -c “ulimit -HSn 65536 &amp;&amp; exec su $LOGNAME”</p><p>-H 设置硬资源限制.<br>-S 设置软资源限制.<br>-a 显示当前所有的资源限制.<br>-c size:设置core文件的最大值.单位:blocks<br>-d size:设置数据段的最大值.单位:kbytes<br>-f size:设置创建文件的最大值.单位:blocks<br>-l size:设置在内存中锁定进程的最大值.单位:kbytes<br>-m size:设置可以使用的常驻内存的最大值.单位:kbytes<br>-n size:设置内核可以同时打开的文件描述符的最大值.单位:n<br>-p size:设置管道缓冲区的最大值.单位:kbytes<br>-s size:设置堆栈的最大值.单位:kbytes<br>-t size:设置CPU使用时间的最大上限.单位:seconds<br>-v size:设置虚拟内存的最大值.单位:kbytes<br>-u &lt;程序数目&gt; 　用户最多可开启的程序数目</p><h2 id="Windows">Windows</h2><p>打开注册表编辑器，在运行栏输入：regedit<br>第一步：启动注册表编辑器HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters<br>第二步：新建<br>值名称：MaxUserPort<br>值类型： DWORD<br>值数据： 65534（用十进制的方法写进去就可以）<br>有效范围： 5000 - 65534 (十进制)<br>默认： 0x1388 5000 （十进制）<br>第三步：新建<br>值名称：TCPTimedWaitDelay<br>值类型： DWORD<br>值数据： 0000001e（也就是30，这个表示TIME_WAIT的秒数）<br>重启电脑</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Linux和windows下内核socket优化项&lt;/h1&gt;
&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;可能能为无法修改的wsl1的tcp内核优化&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;Linux&quot;&gt;Linux&lt;/h2&gt;
&lt;p&gt;vi /etc/sysc</summary>
      
    
    
    
    <category term="零碎点" scheme="http://xcwnice.github.io/categories/%E9%9B%B6%E7%A2%8E%E7%82%B9/"/>
    
    
    <category term="wsl" scheme="http://xcwnice.github.io/tags/wsl/"/>
    
  </entry>
  
  <entry>
    <title>利用vbs隐藏exe窗口</title>
    <link href="http://xcwnice.github.io/2022/03/25/%E9%9B%B6%E7%A2%8E%E7%82%B9/%E5%88%A9%E7%94%A8vbs%E9%9A%90%E8%97%8Fexe%E7%AA%97%E5%8F%A3/"/>
    <id>http://xcwnice.github.io/2022/03/25/%E9%9B%B6%E7%A2%8E%E7%82%B9/%E5%88%A9%E7%94%A8vbs%E9%9A%90%E8%97%8Fexe%E7%AA%97%E5%8F%A3/</id>
    <published>2022-03-25T03:10:34.000Z</published>
    <updated>2022-03-25T10:48:20.142Z</updated>
    
    <content type="html"><![CDATA[<p>vbs代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Dim WShell</span><br><span class="line">Set WShell &#x3D; CreateObject(&quot;WScript.Shell&quot;)</span><br><span class="line">WShell.Run &quot;&quot;&quot;&quot; &amp; &quot;Z:\software\asmr\asmr.exe&quot; &amp; &quot;&quot;&quot;&quot;, 0 </span><br><span class="line">Set WShell &#x3D; Nothing</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vbs代码&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b</summary>
      
    
    
    
    <category term="vbs" scheme="http://xcwnice.github.io/categories/vbs/"/>
    
    
  </entry>
  
  <entry>
    <title>开启与关闭 Hyper-V 服务</title>
    <link href="http://xcwnice.github.io/2022/02/24/%E9%9B%B6%E7%A2%8E%E7%82%B9/%E5%BC%80%E5%90%AF%E4%B8%8E%E5%85%B3%E9%97%AD%20Hyper-V%20%E6%9C%8D%E5%8A%A1/"/>
    <id>http://xcwnice.github.io/2022/02/24/%E9%9B%B6%E7%A2%8E%E7%82%B9/%E5%BC%80%E5%90%AF%E4%B8%8E%E5%85%B3%E9%97%AD%20Hyper-V%20%E6%9C%8D%E5%8A%A1/</id>
    <published>2022-02-24T12:23:00.000Z</published>
    <updated>2022-03-07T05:47:15.227Z</updated>
    
    <content type="html"><![CDATA[<h1>关闭指令</h1><ul><li><p>以管理员身份运行命令提示符</p></li><li><p>执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit &#x2F;set hypervisorlaunchtype off</span><br></pre></td></tr></table></figure></li><li><p>重启</p></li></ul><h1>开启指令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit &#x2F;set hypervisorlaunchtype auto</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;关闭指令&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;以管理员身份运行命令提示符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    <category term="零碎点" scheme="http://xcwnice.github.io/categories/%E9%9B%B6%E7%A2%8E%E7%82%B9/"/>
    
    
    <category term="windows" scheme="http://xcwnice.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>win10 端口无故被占用的问题</title>
    <link href="http://xcwnice.github.io/2022/02/24/%E9%9B%B6%E7%A2%8E%E7%82%B9/win10%20%E7%AB%AF%E5%8F%A3%E6%97%A0%E6%95%85%E8%A2%AB%E5%8D%A0%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://xcwnice.github.io/2022/02/24/%E9%9B%B6%E7%A2%8E%E7%82%B9/win10%20%E7%AB%AF%E5%8F%A3%E6%97%A0%E6%95%85%E8%A2%AB%E5%8D%A0%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-02-24T05:02:00.000Z</published>
    <updated>2022-03-14T03:14:24.354Z</updated>
    
    <content type="html"><![CDATA[<h1>win10 端口无故被占用的问题</h1><p>Win10经常会碰到端口被占用的情况，一般来说，用<code>netstat-aon|findstr 端口号</code>可以找到占用端口的对应进程，干掉它就好，</p><p>在开启了Hyper-V后，有时会出现端口被占用，但是绑定到这个端口时提示端口已被占用，这是因为有服务将这些端口设为保留端口，无法被应用使用<br>可以使用</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> stop winnat</span><br></pre></td></tr></table></figure><p>将服务关闭，就可以使用这些端口了</p><p>然后再开启这个服务</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> winnat</span><br></pre></td></tr></table></figure><p>也可以将你常用的端口排除在保留端口外</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh int ipv4 add excludedportrange protocol=tcp startport=<span class="number">50323</span> numberofports=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>当然，最好还是让它占用的随机端口是我们不需要的部分</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">netsh int ipv4 <span class="built_in">set</span> dynamicport tcp <span class="built_in">start</span>=<span class="number">11000</span> num=<span class="number">8999</span></span><br><span class="line">netsh int ipv4 <span class="built_in">set</span> dynamicport udp <span class="built_in">start</span>=<span class="number">11000</span> num=<span class="number">8999</span></span><br><span class="line">netsh int ipv6 <span class="built_in">set</span> dynamicport tcp <span class="built_in">start</span>=<span class="number">11000</span> num=<span class="number">8999</span></span><br><span class="line">netsh int ipv6 <span class="built_in">set</span> dynamicport udp <span class="built_in">start</span>=<span class="number">11000</span> num=<span class="number">8</span></span><br></pre></td></tr></table></figure><p>这是让它在11000-12000端口中挑选随机端口</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;win10 端口无故被占用的问题&lt;/h1&gt;
&lt;p&gt;Win10经常会碰到端口被占用的情况，一般来说，用&lt;code&gt;netstat-aon|findstr 端口号&lt;/code&gt;可以找到占用端口的对应进程，干掉它就好，&lt;/p&gt;
&lt;p&gt;在开启了Hyper-V后，有时会出现端口被占</summary>
      
    
    
    
    <category term="零碎点" scheme="http://xcwnice.github.io/categories/%E9%9B%B6%E7%A2%8E%E7%82%B9/"/>
    
    
    <category term="windows" scheme="http://xcwnice.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>yolov3人数统计</title>
    <link href="http://xcwnice.github.io/2022/01/24/opencv/yolov3%E4%BA%BA%E6%95%B0%E7%BB%9F%E8%AE%A1/"/>
    <id>http://xcwnice.github.io/2022/01/24/opencv/yolov3%E4%BA%BA%E6%95%B0%E7%BB%9F%E8%AE%A1/</id>
    <published>2022-01-24T14:58:34.000Z</published>
    <updated>2022-01-24T14:58:50.682Z</updated>
    
    <content type="html"><![CDATA[<h1>opencv-人数统计</h1><p><a href="https://github.com/leviome/human_counter">https://github.com/leviome/human_counter</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;opencv-人数统计&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/leviome/human_counter&quot;&gt;https://github.com/leviome/human_counter&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="opencv" scheme="http://xcwnice.github.io/categories/opencv/"/>
    
    
    <category term="opencv" scheme="http://xcwnice.github.io/tags/opencv/"/>
    
    <category term="yolov3" scheme="http://xcwnice.github.io/tags/yolov3/"/>
    
  </entry>
  
  <entry>
    <title>cocoapi的安装坑</title>
    <link href="http://xcwnice.github.io/2021/09/11/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/cocoapi%E7%9A%84%E5%AE%89%E8%A3%85%E5%9D%91/"/>
    <id>http://xcwnice.github.io/2021/09/11/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/cocoapi%E7%9A%84%E5%AE%89%E8%A3%85%E5%9D%91/</id>
    <published>2021-09-11T14:01:30.000Z</published>
    <updated>2021-09-11T14:01:41.849Z</updated>
    
    <content type="html"><![CDATA[<h1>换镜像</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install “git+https:&#x2F;&#x2F;gitee.com&#x2F;wsyin&#x2F;cocoapi.git#subdirectory&#x3D;PythonAPI”</span><br></pre></td></tr></table></figure><h1>最原始方法安装</h1><p><img src="/2021/09/11/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/cocoapi%E7%9A%84%E5%AE%89%E8%A3%85%E5%9D%91/image-20210911213436881.png" alt="image-20210911213436881"></p><div class="note info flat"><p>根据python官方文档的安装第三方库的方式</p></div><ol><li>先进入<a href="https://github.com/cocodataset/cocoapi#subdirectory=PythonAPI'">cocoapi</a></li></ol><p><img src="/2021/09/11/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/cocoapi%E7%9A%84%E5%AE%89%E8%A3%85%E5%9D%91/image-20210911215353491.png" alt="image-20210911215353491"></p><ol start="2"><li><p>然后下载zip</p></li><li><p>解压zip进入</p><p><img src="/2021/09/11/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/cocoapi%E7%9A%84%E5%AE%89%E8%A3%85%E5%9D%91/image-20210911215658492.png" alt="image-20210911215658492"></p><p>在此先修改setup.py为如下：</p><p><img src="/2021/09/11/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/cocoapi%E7%9A%84%E5%AE%89%E8%A3%85%E5%9D%91/image-20210911215844598.png" alt="image-20210911215844598"></p></li></ol><p>然后在此开cmd，换环境为专门为yolox管理的环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate (这里为环境名)</span><br><span class="line">python setpy.py install</span><br></pre></td></tr></table></figure><p>后面查看cocoapi是否安装完毕</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure><p><img src="/2021/09/11/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/cocoapi%E7%9A%84%E5%AE%89%E8%A3%85%E5%9D%91/image-20210911220115987.png" alt="image-20210911220115987"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;换镜像&lt;/h1&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="深度学习入门" scheme="http://xcwnice.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/"/>
    
    
    <category term="cocoapi" scheme="http://xcwnice.github.io/tags/cocoapi/"/>
    
  </entry>
  
  <entry>
    <title>python文件处理</title>
    <link href="http://xcwnice.github.io/2021/09/11/python/python%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>http://xcwnice.github.io/2021/09/11/python/python%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</id>
    <published>2021-09-11T03:25:31.000Z</published>
    <updated>2021-09-11T03:25:49.576Z</updated>
    
    
    
    
    <category term="python" scheme="http://xcwnice.github.io/categories/python/"/>
    
    
    <category term="python" scheme="http://xcwnice.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法</title>
    <link href="http://xcwnice.github.io/2021/07/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <id>http://xcwnice.github.io/2021/07/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</id>
    <published>2021-07-21T15:24:11.000Z</published>
    <updated>2021-09-06T03:01:05.260Z</updated>
    
    <content type="html"><![CDATA[<h1>线性结构</h1><h1>引子——多项式表示</h1><ul><li><p>用数组实现</p><ul><li><p>直接表示</p><blockquote><p>即把数组的索引当做是指数位，索引的值当作是系数</p></blockquote></li><li><p>用二维数组(结构数组)表示</p><blockquote><p>即储存指数和指数所对应的系数来表示一个多项式</p></blockquote></li></ul></li><li><p>用链表实现</p><blockquote><p>方法类似用二维数组表示，不同点在于多了一个指针域</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typerdef <span class="class"><span class="keyword">struct</span> <span class="title">PolyNode</span> *<span class="title">Polynomial</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PolyNode</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> coef;</span><br><span class="line"><span class="keyword">int</span> expon;</span><br><span class="line">Polynomial link;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="线性表的使用">线性表的使用</h2><ul><li>同一个问题可以有不同的表示(存储方式)</li><li>有一类共性问题：有序线性序列的组织和管理</li></ul><p>{note info flat}</p><p>视频中关于用顺序存储结构来做的事情，可以完全被链表结构替代</p><p>{endnote}</p><h3 id="线性表的功能">线性表的功能</h3><ol><li>查找</li><li>插入</li><li>删除</li><li>初始化</li></ol><h3 id="线性表的链式存储实现">线性表的链式存储实现</h3><blockquote><p>一个链表由两个成分组成：一个是链表存储的数据，一个是指向下一个链表的指针。</p></blockquote><ol><li><p>查找</p><ul><li><p>按序号查找</p></li><li><p>按值查找</p></li></ul></li><li><p>插入</p><ul><li>先找到对应的链表索引P，然后创建新的链表单元s，在新的链表中的next指针中保存P中的next指针的信息，随后将p中的next指针指向s。</li><li>以下为代码表达</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s-&gt;next=p-&gt;next;</span><br><span class="line">p-&gt;next=s</span><br></pre></td></tr></table></figure></li><li><p>删除</p><ul><li>先找到对应的链表索引的前一项，然后修改其中的链表next指针，使其跳过目标链表，随后回收目标链表的内存</li></ul></li></ol><h2 id="多重链表">!!!多重链表</h2><p>指链表中的节点可能同时隶属于多个链</p><blockquote><p>p16 需重新补充多个笔记，以及代码笔记</p></blockquote><h2 id="栈">栈</h2><h3 id="后缀表达式">后缀表达式</h3><p>62/3-42*+=?</p><ul><li>利用堆栈思想算</li></ul><h3 id="抽象数据类型">抽象数据类型</h3><ul><li><p>将元素压入堆栈</p></li><li><p>删除并返回栈顶元素</p></li><li><p>两个判断</p><ul><li>是否为空</li><li>是否为满</li></ul></li></ul><h2 id="栈的顺序存储实现">栈的顺序存储实现</h2><p>​栈的顺序存储结构通常由一个一维数组和一个记录栈顶的元素位置的变量来组成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#defing Maxsize</span><br><span class="line">typedef struct SNode *Stack;</span><br><span class="line">struct SNode&#123;</span><br><span class="line">ElementType Date[Maxsize];</span><br><span class="line">int Top;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>判断栈是否为满或者为空，是看Top的值是-1还是Maxsize-1的数</p></blockquote><h3 id="入栈">入栈</h3><ul><li>优先判断是否满栈</li><li>判断非满栈后将栈顶的数值+1，并将栈顶的数值索引对应的数组的值调整为输入的数值</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Void <span class="title">Push</span><span class="params">(Stack PtrS,ElementType item)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(PtrS-&gt;Top==Maxsize<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;已满&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">PtrS-&gt;Date[++(PtrS-&gt;Top)]=item</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出栈">出栈</h3><ul><li>优先判断是否为空栈</li><li>判断非空栈后将栈顶的数值索引对应的数组的值导出，并将栈顶判断数值-1</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">(Stack PtrS)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(PtrS-&gt;Top==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;栈为空&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> ERROR</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> PtrS-&gt;Date[(PtrS-&gt;Top)--]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="入栈与出栈总结">入栈与出栈总结</h3><ul><li>都需要优先做判断以防报错</li><li>对栈顶判断数值操作的先后顺序不一样，入栈需要在操作数组前做+1操作，而出栈则需要在操作数组后做-1操作</li></ul><h3 id="练习——一个数组实现两个堆栈">练习——一个数组实现两个堆栈</h3><blockquote><p>一般设计为从两头开始往中间靠拢，当两个栈顶指针相遇时，表示两个栈都满了</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxsize </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DStack</span>&#123;</span></span><br><span class="line">ElementType Data[Maxsize];</span><br><span class="line"><span class="keyword">int</span> Top1;</span><br><span class="line"><span class="keyword">int</span> Top2</span><br><span class="line">&#125;S;</span><br><span class="line">S.Top1=<span class="number">-1</span></span><br><span class="line">S.Top2=Maxsize</span><br></pre></td></tr></table></figure><h4 id="此方法下插入操作">此方法下插入操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Void <span class="title">Push</span><span class="params">(struct DStack *PtrS,ElementType item,<span class="keyword">int</span> Tag)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(PtrS-&gt;Top2 - PtrS-&gt;Top1 = <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;栈已满&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Tag==<span class="number">1</span>)&#123;</span><br><span class="line">PtrS-&gt;Data[++PtrS-&gt;Top1]=item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">PtrS-&gt;Data[--PtrS-&gt;Top2]=item;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="此方法下删除操作">此方法下删除操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">(struct DStack *PtrS,<span class="keyword">int</span> Tag)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Tag==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(PtrS-&gt;Tag1 == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;栈1为空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> PtrS-&gt;Data[PtrS-&gt;Top1--];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(PtrS-&gt;Tag2 == Maxsize)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;栈2为空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> PtrS-&gt;Data[PtrS-&gt;Top2++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;线性结构&lt;/h1&gt;
&lt;h1&gt;引子——多项式表示&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用数组实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;直接表示&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;即把数组的索引当做是指数位，索引的值当作是系数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li</summary>
      
    
    
    
    <category term="数据结构" scheme="http://xcwnice.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://xcwnice.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>爬虫入门</title>
    <link href="http://xcwnice.github.io/2021/05/25/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/"/>
    <id>http://xcwnice.github.io/2021/05/25/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/</id>
    <published>2021-05-25T02:59:34.000Z</published>
    <updated>2021-07-06T03:02:19.477Z</updated>
    
    <content type="html"><![CDATA[<h1>所需库</h1><ul><li><p>faker</p><blockquote><p>伪装</p></blockquote></li><li><p>threading</p></li><li><p>requests</p></li><li><p>pyquery</p></li><li><p>os</p></li></ul><h2 id="pyquery中常用选择器">pyquery中常用选择器</h2><p>一、元素选择</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*$(&quot;*&quot;)所有元素</span><br><span class="line">element$(&quot;p&quot;)&lt;p&gt; 元素</span><br><span class="line">ele1,ele2$(&quot;th,td&quot;)&lt;th&gt;或&lt;td&gt;元素</span><br><span class="line">#id$(&quot;p#lastname&quot;)id&#x3D;&quot;lastname&quot; 的p元素</span><br><span class="line">.class$(&quot;p.intro&quot;)class&#x3D;&quot;intro&quot; 的p元素</span><br><span class="line">.class.class$(&quot;p.intro.demo&quot;)class&#x3D;&quot;intro&quot; 且 class&#x3D;&quot;demo&quot; 的p元素</span><br><span class="line">ele:emtpy$(&quot;p:empty&quot;)不包含子元素的p元素</span><br><span class="line">ele:parent$(&quot;p:parent&quot;)包含子元素的p元素</span><br><span class="line">ele1.has(ele2)$(&quot;div:has(p.intro)&quot;)有p子元素且子元素属性为intro的div元素</span><br></pre></td></tr></table></figure><p>二、属性选择</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[attr]$(p&quot;[href]&quot;)有href属性的p元素</span><br><span class="line">[attr1][attr2]$(&quot;p[title][href]&quot;)同时有title和href属性的p元素</span><br><span class="line">[attr&#x3D;value]$(&quot;p[href&#x3D;&#39;#&#39;]&quot;)href 属性等于&quot;#&quot;的p元素</span><br><span class="line">[attr!&#x3D;value]$(&quot;p[href!&#x3D;&#39;#&#39;]&quot;)href 属性不等于&quot;#&quot;的p元素</span><br><span class="line">[attr$&#x3D;value]$(&quot;p[href$&#x3D;&#39;.jpg&#39;]&quot;)href 属性以&quot;.jpg&quot;结尾的p元素</span><br><span class="line">[attr^&#x3D;value]$(&quot;p[href^&#x3D;&#39;fb&#39;]&quot;)href 属性以&quot;fb&quot;开头的p元素</span><br><span class="line">[attr*&#x3D;value]$(&quot;p[href*&#x3D;&#39;link&#39;]&quot;)href 属性包含&quot;link&quot;的p元素</span><br></pre></td></tr></table></figure><p>三、内容选择</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:contains(value)$(&quot;p:contains(&#39;W3School&#39;)&quot;)包含指定字符串的p元素</span><br></pre></td></tr></table></figure><p>四、反向选择</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">:not()</span><br><span class="line">$(&quot;div:not(:has(p))&quot;)</span><br><span class="line"></span><br><span class="line">$(p:not([href])&quot;)</span><br><span class="line"></span><br><span class="line">$(&quot;p:not(:contains(&#39;abc&#39;))&quot;)</span><br><span class="line"></span><br><span class="line">不包含子元素p的div元素</span><br><span class="line"></span><br><span class="line">没有属性href的元素</span><br><span class="line"></span><br><span class="line">不包含指定字符串的p元素</span><br></pre></td></tr></table></figure><p>五、关系选择</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ele1 ele2$(&quot;div li&quot;)元素div的后代li元素</span><br><span class="line">ele1 &gt; ele2$(&quot;div &gt; li&quot;)元素div的li子元素</span><br><span class="line">:eq(index)$(&quot;ul li:eq(3)&quot;)选择第4个li元素</span><br><span class="line">:gt(index)$(&quot;ul li:gt(3)&quot;)选择第4个以后的元素</span><br><span class="line">:lt(index)$(&quot;ul li:lt(3)&quot;)选择第4个以前的元素</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;所需库&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;faker&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;伪装&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;threading&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;requests&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;</summary>
      
    
    
    
    <category term="爬虫" scheme="http://xcwnice.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="python" scheme="http://xcwnice.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>opencv-yolov3</title>
    <link href="http://xcwnice.github.io/2021/05/19/opencv/opencv_tf/"/>
    <id>http://xcwnice.github.io/2021/05/19/opencv/opencv_tf/</id>
    <published>2021-05-19T02:59:34.000Z</published>
    <updated>2021-05-20T08:52:48.328Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning flat"><p>以下内容全部由python实现</p></div><h1>库引用</h1><p>用到的库有:</p><ul><li>numpy</li><li>cv2</li><li>os</li><li>time</li></ul><blockquote><p><s>虽然是opencv实现这些都是废话</s></p></blockquote><h1>知识点</h1><h2 id="图像去均值">图像去均值</h2><h2 id="yolov3">yolov3</h2><p><img src="/2021/05/19/opencv/opencv_tf/17aedc63204d445a1b4cae8e226dafa-1621489324016.png" alt="17aedc63204d445a1b4cae8e226dafa"></p><h1>函数</h1><h2 id="cv-dnn-readNetFromDarknet">cv.dnn.readNetFromDarknet</h2><blockquote><p>Python:</p><ul><li><p>retval=cv.dnn.readNetFromDarknet(cfgFile[, darknetModel])</p></li><li><p>retval=cv.dnn.readNetFromDarknet(bufferCfg[, bufferModel])</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;opencv2&#x2F;dnn&#x2F;dnn.hpp&gt;</span><br></pre></td></tr></table></figure><p>Reads a network model stored in <a href="https://pjreddie.com/darknet/">Darknet</a> model files.</p><ul><li><p>Parameters</p><p>cfgFilepath to the .cfg file with text description of the network architecture.darknetModelpath to the .weights file with learned network.</p></li><li><p>Returns</p><p>Network object that ready to do forward, throw an exception in failure cases.</p><p><a href="https://docs.opencv.org/4.1.2/db/d30/classcv_1_1dnn_1_1Net.html">Net</a> object.</p></li></ul></blockquote><p>其实说白了就是把cfg文件和weight文件放入这个函数中，然后它会返回一个cv.dnn_Net类</p><h2 id="cv-dnn-blobFromImage">cv.dnn.blobFromImage</h2><div class="note info flat"><p>其实就是做图片预处理</p></div><blockquote><p>cpp:</p><ul><li>blobFromImage(InputArray image,<br>double scalefactor=1.0,<br>const Size&amp; size = Size(),<br>const Scalar&amp; mean = Scalar(),<br>bool swapRB = false,<br>bool crop = false,<br>int ddepth = CV_32F)</li></ul><p>Python:</p><ul><li>retval=cv.dnn.blobFromImage(image[, scalefactor[, size[, mean[, swapRB[, crop[, ddepth]]]]]])</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;opencv2&#x2F;dnn&#x2F;dnn.hpp&gt;</span><br></pre></td></tr></table></figure><p>Creates 4-dimensional blob from image.</p><p>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</p></blockquote><p>cpp和python里的参数都差不多，其中主要的还是这几个参数</p><ul><li><p>image</p><blockquote><p>图片输入</p></blockquote></li><li><p>scalefactor</p><blockquote><p>在做过图像去均值后，可以对处理后的图片进行尺度缩放，如果希望减去平均像素之后的值，全部缩小一半，那么可以将<code>scalefactor</code>设为1/2。</p></blockquote></li><li><p>size</p><blockquote><p>神经网络输入层所要求的图片size</p></blockquote></li><li><p>mean</p><blockquote><p>需要将图片整体减去的平均值，是数据预处理中的一环，也就是去除图像的平均亮度值，这样就可以得到像素之间的相对值，就可以排除光照的影响。</p></blockquote></li><li><p>swapRB</p><blockquote><p>交换R通道和B通道位置，(cv2.imread读取的是彩图是bgr通道)</p></blockquote></li><li><p>crop</p><blockquote><p>图片裁剪，默认为False，当值为True时，先按比例缩放，然后从中心裁剪成size尺寸</p></blockquote></li><li><p>ddepth</p><blockquote><p>输出的图像深度，可选CV_32F 或者 CV_8U.</p></blockquote></li></ul><div class="note warning flat"><ol><li><p>当同时进行scalefactor,size,mean,swapRB操作时，</p><p>优先按swapRB交换通道，</p><p>其次按scalefactor比例缩放，</p><p>然后按mean求减，</p><p>最后按size进行resize操作</p></li><li><p>当进行减均值操作时，ddepth不能选取CV_8U，否则报错</p></li><li><p>当crop=True时，先等比例缩放，直至<strong>宽高尺寸一个等于对应的size尺寸，另一个大于或者等于对应的size尺寸</strong>，然后再从中心进行裁剪</p></li></ol></div><h2 id="cv-dnn-Net类下方法">cv.dnn_Net类下方法</h2><h3 id="setInput">setInput</h3><h3 id="forward">forward</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">yolo_dir = <span class="string">&#x27;J:\code\yolov3&#x27;</span>  <span class="comment"># YOLO文件路径</span></span><br><span class="line">weightsPath = os.path.join(yolo_dir, <span class="string">&#x27;yolov3.weights&#x27;</span>)  <span class="comment"># 权重文件</span></span><br><span class="line">configPath = os.path.join(yolo_dir, <span class="string">&#x27;yolov3.cfg&#x27;</span>)  <span class="comment"># 配置文件</span></span><br><span class="line">labelsPath = os.path.join(yolo_dir, <span class="string">&#x27;coco.names&#x27;</span>)  <span class="comment"># label名称</span></span><br><span class="line">imgPath = os.path.join(yolo_dir, <span class="string">&#x27;test.jpg&#x27;</span>)  <span class="comment"># 测试图像</span></span><br><span class="line">CONFIDENCE = <span class="number">0.5</span>  <span class="comment"># 过滤弱检测的最小概率</span></span><br><span class="line">THRESHOLD = <span class="number">0.4</span>  <span class="comment"># 非最大值抑制阈值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载网络、配置权重</span></span><br><span class="line">net = cv.dnn.readNetFromDarknet(configPath, weightsPath)  <span class="comment"># #  利用下载的文件</span></span><br><span class="line">print(<span class="string">&quot;[INFO] loading YOLO from disk...&quot;</span>)  <span class="comment"># # 可以打印下信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载图片、转为blob格式、送入网络输入层</span></span><br><span class="line">img = cv.imread(imgPath)</span><br><span class="line">blobImg = cv.dnn.blobFromImage(img, scalefactor=<span class="number">1.0</span>/<span class="number">255.0</span> , size=(<span class="number">416</span>, <span class="number">416</span>), mean=<span class="literal">None</span>, swapRB=<span class="literal">True</span>, crop=<span class="literal">False</span>)   <span class="comment"># # net需要的输入是blob格式的，用blobFromImage这个函数来转格式</span></span><br><span class="line">net.setInput(blobImg)  <span class="comment"># # 调用setInput函数将图片送入输入层</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取网络输出层信息（所有输出层的名字），设定并前向传播</span></span><br><span class="line">outInfo = net.getUnconnectedOutLayersNames()  <span class="comment"># # 前面的yolov3架构也讲了，yolo在每个scale都有输出，outInfo是每个scale的名字信息，供net.forward使用</span></span><br><span class="line">start = time.time()</span><br><span class="line">layerOutputs = net.forward(outInfo)  <span class="comment"># 得到各个输出层的、各个检测框等信息，是二维结构。</span></span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">&quot;[INFO] YOLO took &#123;:.6f&#125; seconds&quot;</span>.<span class="built_in">format</span>(end - start))  <span class="comment"># # 可以打印下信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到图片尺寸</span></span><br><span class="line">(H, W) = img.shape[:<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 过滤layerOutputs</span></span><br><span class="line"><span class="comment"># layerOutputs的第1维的元素内容: [center_x, center_y, width, height, objectness, N-class score data]</span></span><br><span class="line"><span class="comment"># 过滤后的结果放入：</span></span><br><span class="line">boxes = [] <span class="comment"># 所有边界框（各层结果放一起）</span></span><br><span class="line">confidences = [] <span class="comment"># 所有置信度</span></span><br><span class="line">classIDs = [] <span class="comment"># 所有分类ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 1）过滤掉置信度低的框框</span></span><br><span class="line"><span class="keyword">for</span> out <span class="keyword">in</span> layerOutputs:  <span class="comment"># 各个输出层</span></span><br><span class="line">    <span class="keyword">for</span> detection <span class="keyword">in</span> out:  <span class="comment"># 各个框框</span></span><br><span class="line">        <span class="comment"># 拿到置信度</span></span><br><span class="line">        scores = detection[<span class="number">5</span>:]  <span class="comment"># 各个类别的置信度</span></span><br><span class="line">        classID = np.argmax(scores)  <span class="comment"># 最高置信度的id即为分类id</span></span><br><span class="line">        confidence = scores[classID]  <span class="comment"># 拿到置信度</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据置信度筛查</span></span><br><span class="line">        <span class="keyword">if</span> confidence &gt; CONFIDENCE:</span><br><span class="line">            box = detection[<span class="number">0</span>:<span class="number">4</span>] * np.array([W, H, W, H])  <span class="comment"># 将边界框放会图片尺寸</span></span><br><span class="line">            (centerX, centerY, width, height) = box.astype(<span class="string">&quot;int&quot;</span>)</span><br><span class="line">            x = <span class="built_in">int</span>(centerX - (width / <span class="number">2</span>))</span><br><span class="line">            y = <span class="built_in">int</span>(centerY - (height / <span class="number">2</span>))</span><br><span class="line">            boxes.append([x, y, <span class="built_in">int</span>(width), <span class="built_in">int</span>(height)])</span><br><span class="line">            confidences.append(<span class="built_in">float</span>(confidence))</span><br><span class="line">            classIDs.append(classID)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 2）应用非最大值抑制(non-maxima suppression，nms)进一步筛掉</span></span><br><span class="line">idxs = cv.dnn.NMSBoxes(boxes, confidences, CONFIDENCE, THRESHOLD) <span class="comment"># boxes中，保留的box的索引index存入idxs</span></span><br><span class="line"><span class="comment"># 得到labels列表</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(labelsPath, <span class="string">&#x27;rt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    labels = f.read().rstrip(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># 应用检测结果</span></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line">COLORS = np.random.randint(<span class="number">0</span>, <span class="number">255</span>, size=(<span class="built_in">len</span>(labels), <span class="number">3</span>), dtype=<span class="string">&quot;uint8&quot;</span>)  <span class="comment"># 框框显示颜色，每一类有不同的颜色，每种颜色都是由RGB三个值组成的，所以size为(len(labels), 3)</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(idxs) &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> idxs.flatten():  <span class="comment"># indxs是二维的，第0维是输出层，所以这里把它展平成1维</span></span><br><span class="line">        (x, y) = (boxes[i][<span class="number">0</span>], boxes[i][<span class="number">1</span>])</span><br><span class="line">        (w, h) = (boxes[i][<span class="number">2</span>], boxes[i][<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">        color = [<span class="built_in">int</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> COLORS[classIDs[i]]]</span><br><span class="line">        cv.rectangle(img, (x, y), (x+w, y+h), color, <span class="number">2</span>)  <span class="comment"># 线条粗细为2px</span></span><br><span class="line">        text = <span class="string">&quot;&#123;&#125;: &#123;:.4f&#125;&quot;</span>.<span class="built_in">format</span>(labels[classIDs[i]], confidences[i])</span><br><span class="line">        cv.putText(img, text, (x, y-<span class="number">5</span>), cv.FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, color, <span class="number">2</span>)  <span class="comment"># cv.FONT_HERSHEY_SIMPLEX字体风格、0.5字体大小、粗细2px</span></span><br><span class="line">cv.imshow(<span class="string">&#x27;detected image&#x27;</span>, img)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note warning flat&quot;&gt;&lt;p&gt;以下内容全部由python实现&lt;/p&gt;
&lt;/div&gt;
&lt;h1&gt;库引用&lt;/h1&gt;
&lt;p&gt;用到的库有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;numpy&lt;/li&gt;
&lt;li&gt;cv2&lt;/li&gt;
&lt;li&gt;os&lt;/li&gt;
&lt;li&gt;tim</summary>
      
    
    
    
    <category term="opencv" scheme="http://xcwnice.github.io/categories/opencv/"/>
    
    
    <category term="opencv" scheme="http://xcwnice.github.io/tags/opencv/"/>
    
    <category term="yolov3" scheme="http://xcwnice.github.io/tags/yolov3/"/>
    
  </entry>
  
  <entry>
    <title>lrc歌词漂移和srt2lrc</title>
    <link href="http://xcwnice.github.io/2021/05/15/%E5%B0%8F%E5%B7%A5%E5%85%B7/lrc%E6%AD%8C%E8%AF%8D%E6%BC%82%E7%A7%BB%E5%92%8Csrt2lrc/"/>
    <id>http://xcwnice.github.io/2021/05/15/%E5%B0%8F%E5%B7%A5%E5%85%B7/lrc%E6%AD%8C%E8%AF%8D%E6%BC%82%E7%A7%BB%E5%92%8Csrt2lrc/</id>
    <published>2021-05-15T13:59:34.000Z</published>
    <updated>2021-07-06T03:05:13.889Z</updated>
    
    <content type="html"><![CDATA[<h1>lrc歌词漂移</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;由xcw制作的歌词整体漂移程序\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file=<span class="built_in">input</span>(<span class="string">&#x27;输入lrc文件名\n&#x27;</span>)</span><br><span class="line">time_change=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入漂移时间（按秒计算）&#x27;</span>))</span><br><span class="line">coding=<span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">is_coding=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;是否需要修改编码读取格式，默认为utf-8，如果需要修改请输入1，无需请输入0&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> is_coding:</span><br><span class="line">    coding=<span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入编码格式&#x27;</span>))</span><br><span class="line"></span><br><span class="line">(filename,expander)=os.path.splitext(file)</span><br><span class="line"></span><br><span class="line">newfile=filename+<span class="string">&#x27;(处理后).lrc&#x27;</span></span><br><span class="line"></span><br><span class="line">f1=<span class="built_in">open</span>(file,<span class="string">&#x27;r&#x27;</span>,encoding=coding)</span><br><span class="line">f2=<span class="built_in">open</span>(newfile,<span class="string">&#x27;w&#x27;</span>,encoding=coding)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1_word=f1.readlines()</span><br><span class="line"><span class="keyword">for</span> f1_x <span class="keyword">in</span> f1_word:</span><br><span class="line">    <span class="comment"># 数字提取</span></span><br><span class="line">    str_1=re.search(<span class="string">&#x27;\[[0-9]+?\:&#x27;</span>,f1_x)</span><br><span class="line">    str_1_1=re.search(<span class="string">&#x27;[0-9]+&#x27;</span>,str_1.group(<span class="number">0</span>))</span><br><span class="line">    str_2=re.search(<span class="string">&#x27;\:[0-9]+?\.&#x27;</span>,f1_x)</span><br><span class="line">    str_2_1=re.search(<span class="string">&#x27;[0-9]+&#x27;</span>,str_2.group(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(<span class="built_in">int</span>(str_1_1.group(<span class="number">0</span>)))</span><br><span class="line">    print(<span class="built_in">int</span>(str_2_1.group(<span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line">    n1=<span class="built_in">int</span>(str_1_1.group(<span class="number">0</span>))</span><br><span class="line">    n2=<span class="built_in">int</span>(str_2_1.group(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    n2=n2+time_change</span><br><span class="line">    <span class="keyword">if</span> n2&lt;<span class="number">0</span> :</span><br><span class="line">        n1=n1-<span class="number">1</span></span><br><span class="line">        n2=n2+<span class="number">60</span></span><br><span class="line">    <span class="keyword">elif</span> n2&gt;<span class="number">60</span>:</span><br><span class="line">        n1=n1+<span class="number">1</span></span><br><span class="line">        n2=n2-<span class="number">60</span></span><br><span class="line"></span><br><span class="line">    n1_str=<span class="built_in">str</span>(n1)</span><br><span class="line">    n2_str=<span class="built_in">str</span>(n2)</span><br><span class="line">    <span class="keyword">if</span> n1&lt;<span class="number">10</span>:</span><br><span class="line">        n1_str=<span class="string">&#x27;0&#x27;</span>+n1_str</span><br><span class="line">    <span class="keyword">if</span> n2&lt;<span class="number">10</span>:</span><br><span class="line">        n2_str=<span class="string">&#x27;0&#x27;</span>+n2_str</span><br><span class="line"></span><br><span class="line">    change=<span class="string">f&#x27;[<span class="subst">&#123;n1_str&#125;</span>:<span class="subst">&#123;n2_str&#125;</span>.&#x27;</span></span><br><span class="line">    print(change)</span><br><span class="line">    x=re.sub(<span class="string">&#x27;\[[0-9]+?\:[0-9]+?\.&#x27;</span>,change,f1_x)</span><br><span class="line"></span><br><span class="line">    f2.write(x)</span><br><span class="line"></span><br><span class="line">f1.close()</span><br><span class="line">f2.close()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;请检查是否有报错&#x27;</span>)</span><br><span class="line">os.system(<span class="string">&quot;pause&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>srt2lrc</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;xcw制作的srt批量转lrc工具&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;--------------------------------------------------------------------------&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;请确定将此文件放到要处理字幕的srt文件的根目录下&#x27;</span>)</span><br><span class="line">os.system(<span class="string">&#x27;pause&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> = os.getcwd()</span><br><span class="line">newdir = <span class="built_in">dir</span> + <span class="string">&#x27;\lrc处理&#x27;</span></span><br><span class="line">os.mkdir(newdir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="built_in">dir</span>):  <span class="comment"># 遍历该文件夹</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:  <span class="comment"># 遍历刚获得的文件名files</span></span><br><span class="line">        (filename, extension) = os.path.splitext(file)  <span class="comment"># 将文件名拆分为文件名与后缀</span></span><br><span class="line">        <span class="keyword">if</span> (extension == <span class="string">&#x27;.srt&#x27;</span>):  <span class="comment"># 判断该后缀是否为srt文件</span></span><br><span class="line">            name = filename + <span class="string">&#x27;.srt&#x27;</span></span><br><span class="line">            rename = filename + <span class="string">&#x27;.redosrt&#x27;</span></span><br><span class="line">            f = <span class="built_in">open</span>(name, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            f2 = <span class="built_in">open</span>(rename, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            txt1 = f.readlines()</span><br><span class="line">            count = <span class="built_in">len</span>(txt1)</span><br><span class="line">            is_out = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> txt1:</span><br><span class="line">                <span class="keyword">if</span> re.search(<span class="string">&#x27;--&gt;&#x27;</span>, x):</span><br><span class="line">                    <span class="comment"># partern=&#x27;[0-9]+?\:[0-9]+?\:[0-9]+?,[0-9]&#123;1,2&#125;&#x27;</span></span><br><span class="line">                    partern = <span class="string">&#x27;[0-9]+?\:[0-9]+?,[0-9]&#123;1,2&#125;&#x27;</span></span><br><span class="line">                    str_1 = re.search(partern, x)</span><br><span class="line"></span><br><span class="line">                    f2_str_write = <span class="string">&#x27;[&#x27;</span> + str_1.group(<span class="number">0</span>).replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;.&#x27;</span>) + <span class="string">&#x27;]&#x27;</span></span><br><span class="line">                    print(f2_str_write)</span><br><span class="line">                    f2.write(f2_str_write)</span><br><span class="line">                    is_out = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> is_out:</span><br><span class="line">                    print(x)</span><br><span class="line">                    f2.write(x)</span><br><span class="line">                    is_out = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            f.close()</span><br><span class="line">            f2.close()</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&#x27;copy *.redosrt &#x27;</span> + newdir)</span><br><span class="line">os.system(<span class="string">&#x27;del *.redosrt&#x27;</span>)</span><br><span class="line">os.chdir(newdir)</span><br><span class="line">os.system(<span class="string">&#x27;ren *.redosrt *.lrc&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;lrc歌词漂移&lt;/h1&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp</summary>
      
    
    
    
    <category term="小工具" scheme="http://xcwnice.github.io/categories/%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="lrc处理" scheme="http://xcwnice.github.io/tags/lrc%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>pandas学习</title>
    <link href="http://xcwnice.github.io/2021/05/02/python/pandas%E5%AD%A6%E4%B9%A0/"/>
    <id>http://xcwnice.github.io/2021/05/02/python/pandas%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-02T12:24:31.000Z</published>
    <updated>2021-09-11T03:25:13.455Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p>推荐配合jupyter notebook使用</p></div><h1>开始</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h1>读取数据函数</h1><h2 id="read-csv">read_csv</h2><p>常用参数:</p><ul><li><strong>filepath_or_buffer</strong></li><li><strong>sep</strong></li><li><strong>encoding</strong></li><li><strong>engine</strong></li></ul><h2 id="read-excel">read_excel</h2><p>常用参数:</p><ul><li><strong>io</strong></li><li><strong>sheet_name</strong></li><li><strong>header</strong></li><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;推荐配合jupyter notebook使用&lt;/p&gt;
&lt;/div&gt;
&lt;h1&gt;开始&lt;/h1&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;</summary>
      
    
    
    
    <category term="python" scheme="http://xcwnice.github.io/categories/python/"/>
    
    
    <category term="python" scheme="http://xcwnice.github.io/tags/python/"/>
    
    <category term="win32" scheme="http://xcwnice.github.io/tags/win32/"/>
    
  </entry>
  
  <entry>
    <title>win32-python</title>
    <link href="http://xcwnice.github.io/2021/04/25/python/win32-python/"/>
    <id>http://xcwnice.github.io/2021/04/25/python/win32-python/</id>
    <published>2021-04-25T15:24:31.000Z</published>
    <updated>2021-04-25T13:57:38.885Z</updated>
    
    <content type="html"><![CDATA[<h1>win32-python</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;win32-python&lt;/h1&gt;
</summary>
      
    
    
    
    <category term="python" scheme="http://xcwnice.github.io/categories/python/"/>
    
    
    <category term="python" scheme="http://xcwnice.github.io/tags/python/"/>
    
    <category term="win32" scheme="http://xcwnice.github.io/tags/win32/"/>
    
  </entry>
  
  <entry>
    <title>标记文本</title>
    <link href="http://xcwnice.github.io/2021/04/21/gal%E6%B1%89%E5%8C%96%E8%AE%B0%E5%BD%95/%E6%A0%87%E8%AE%B0%E6%96%87%E6%9C%AC/"/>
    <id>http://xcwnice.github.io/2021/04/21/gal%E6%B1%89%E5%8C%96%E8%AE%B0%E5%BD%95/%E6%A0%87%E8%AE%B0%E6%96%87%E6%9C%AC/</id>
    <published>2021-04-21T04:44:05.000Z</published>
    <updated>2021-04-21T04:22:26.105Z</updated>
    
    <content type="html"><![CDATA[<h1>标记文本</h1><div class="note warning flat"><p>code中有很多地方可以简化，但为了中间方便debug，所以创建了多个文件夹进行检查</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;请确定将此文件放到要提取日文的txt文件的根目录下&#x27;</span>)</span><br><span class="line">os.system(<span class="string">&#x27;pause&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dir1 =os.getcwd()</span><br><span class="line"></span><br><span class="line">newdir1=dir1+<span class="string">&#x27;\文件处理&#x27;</span></span><br><span class="line">os.mkdir(newdir1)</span><br><span class="line">newdir2=dir1+<span class="string">&#x27;\需导入文件文件夹&#x27;</span></span><br><span class="line">os.mkdir(newdir2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(dir1):                      <span class="comment">#遍历该文件夹</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:                                      <span class="comment">#遍历刚获得的文件名files</span></span><br><span class="line">        (filename, extension) = os.path.splitext(file)      <span class="comment">#将文件名拆分为文件名与后缀</span></span><br><span class="line">        <span class="keyword">if</span> (extension == <span class="string">&#x27;.txt&#x27;</span>):                           <span class="comment">#判断该后缀是否为txt文件</span></span><br><span class="line">            name=filename+<span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">            rename=filename+<span class="string">&#x27;处理.find&#x27;</span></span><br><span class="line">            f = <span class="built_in">open</span>(name, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line">            f2 = <span class="built_in">open</span>(rename, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line">            txt1 = f.readlines()</span><br><span class="line">            count = <span class="built_in">len</span>(txt1)</span><br><span class="line">            num = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> txt1:</span><br><span class="line">                <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">                    f2.write(<span class="string">&#x27;id【&#x27;</span>+x)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    f2.write(<span class="built_in">str</span>(num) + <span class="string">&#x27;【&#x27;</span> + x)</span><br><span class="line">                num = num + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            f.close()</span><br><span class="line">            f2.close()</span><br><span class="line"></span><br><span class="line">            csvframe = pd.read_csv(rename, encoding=<span class="string">&#x27;utf-16&#x27;</span>,sep=<span class="string">&#x27;【&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            find = csvframe.loc[<span class="keyword">lambda</span> csvframe: csvframe[<span class="string">&#x27;id&#x27;</span>] % <span class="number">4</span> == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            print(find)</span><br><span class="line">            print(csvframe)</span><br><span class="line">            namedo=filename+<span class="string">&#x27;机翻预处理.txt1&#x27;</span></span><br><span class="line">            find.to_csv(namedo, encoding=<span class="string">&quot;utf-16&quot;</span>, index=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            namedone=filename+<span class="string">&#x27;.txt2&#x27;</span></span><br><span class="line">            f3 = <span class="built_in">open</span>(namedo, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line">            f4 = <span class="built_in">open</span>(namedone, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            txt2 = f3.readlines()</span><br><span class="line">            num = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> txt2:</span><br><span class="line">                <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">                    x = x.replace(<span class="string">&#x27;id,&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">                    print(x)</span><br><span class="line">                    f4.write(x)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># regax=&#x27;[0-9]&#123;1,2&#125;\.0\,&#x27;</span></span><br><span class="line">                    regax = <span class="string">&#x27;[0-9]&#123;1,12&#125;\,&#x27;</span></span><br><span class="line">                    x = re.sub(regax, <span class="string">&#x27;&#x27;</span>, x)</span><br><span class="line">                    f4.write(x)</span><br><span class="line">                num = num + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            f3.close()</span><br><span class="line">            f4.close()</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&#x27;copy *.txt2 &#x27;</span>+newdir1)</span><br><span class="line">os.system(<span class="string">&#x27;copy *.find &#x27;</span>+newdir2)</span><br><span class="line">os.system(<span class="string">&#x27;del *.find&#x27;</span>)</span><br><span class="line">os.system(<span class="string">&#x27;del *.txt1&#x27;</span>)</span><br><span class="line">os.system(<span class="string">&#x27;del *.txt2&#x27;</span>)</span><br><span class="line">os.chdir(newdir1)</span><br><span class="line">os.system(<span class="string">&#x27;ren *.txt2 *.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">os.chdir(newdir2)</span><br><span class="line">os.system(<span class="string">&#x27;ren *.find *.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#######################################################################################</span></span><br><span class="line">os.chdir(newdir1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&#x27;请确定将此文件放到要处理正则表达式的txt文件的根目录下&#x27;)</span></span><br><span class="line"><span class="comment"># os.system(&#x27;pause&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> = os.getcwd()</span><br><span class="line">newdir3 = <span class="built_in">dir</span> + <span class="string">&#x27;\正则表达式处理&#x27;</span></span><br><span class="line">os.mkdir(newdir3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="built_in">dir</span>):  <span class="comment"># 遍历该文件夹</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:  <span class="comment"># 遍历刚获得的文件名files</span></span><br><span class="line">        (filename, extension) = os.path.splitext(file)  <span class="comment"># 将文件名拆分为文件名与后缀</span></span><br><span class="line">        <span class="keyword">if</span> (extension == <span class="string">&#x27;.txt&#x27;</span>):  <span class="comment"># 判断该后缀是否为txt文件</span></span><br><span class="line">            name = filename + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">            rename = filename + <span class="string">&#x27;.redotxt&#x27;</span></span><br><span class="line">            f = <span class="built_in">open</span>(name, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line">            f2 = <span class="built_in">open</span>(rename, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line">            txt1 = f.readlines()</span><br><span class="line">            count = <span class="built_in">len</span>(txt1)</span><br><span class="line">            num = <span class="number">1</span></span><br><span class="line">            id1 = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> txt1:</span><br><span class="line">                <span class="keyword">if</span> id1:</span><br><span class="line">                    f2.write(x)</span><br><span class="line">                    id1 = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> re.search(<span class="string">&#x27;\/\/&#x27;</span>, x):</span><br><span class="line">                    num = <span class="number">0</span></span><br><span class="line">                <span class="keyword">if</span> num:</span><br><span class="line">                    x = <span class="string">&#x27;&#123;test&#125;&#x27;</span> + x</span><br><span class="line"></span><br><span class="line">                f2.write(x)</span><br><span class="line"></span><br><span class="line">            f.close()</span><br><span class="line">            f2.close()</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&#x27;copy *.redotxt &#x27;</span> + newdir3)</span><br><span class="line">os.system(<span class="string">&#x27;del *.redotxt&#x27;</span>)</span><br><span class="line">os.chdir(newdir3)</span><br><span class="line">os.system(<span class="string">&#x27;ren *.redotxt *.txt&#x27;</span>)</span><br><span class="line"><span class="comment">##</span></span><br><span class="line">os.system(<span class="string">&#x27;copy *.txt &#x27;</span>+newdir2)</span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line">os.chdir(newdir2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&#x27;请确定将此文件放到要导入日文的txt文件的根目录下&#x27;)</span></span><br><span class="line"><span class="comment"># os.system(&#x27;pause&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span>=os.getcwd()</span><br><span class="line">newdir4=<span class="built_in">dir</span>+<span class="string">&#x27;\标记后文本文件夹&#x27;</span></span><br><span class="line">os.mkdir(newdir4)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="built_in">dir</span>):                      <span class="comment">#遍历该文件夹</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:                                      <span class="comment">#遍历刚获得的文件名files</span></span><br><span class="line">        (filename, extension) = os.path.splitext(file)      <span class="comment">#将文件名拆分为文件名与后缀</span></span><br><span class="line">        <span class="keyword">if</span> (extension == <span class="string">&#x27;.txt&#x27;</span>):                           <span class="comment">#判断该后缀是否为txt文件</span></span><br><span class="line">            name=filename+<span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">            rename=filename+<span class="string">&#x27;.redotxt&#x27;</span></span><br><span class="line">            f = <span class="built_in">open</span>(name, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line">            f2 = <span class="built_in">open</span>(rename, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line">            txt1 = f.readlines()</span><br><span class="line">            count = <span class="built_in">len</span>(txt1)</span><br><span class="line">            num = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> txt1:</span><br><span class="line">                <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">                    finallydo=x</span><br><span class="line">                    f2.write(<span class="string">&#x27;id【&#x27;</span>+finallydo)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    f2.write(<span class="built_in">str</span>(num) + <span class="string">&#x27;【&#x27;</span> + x)</span><br><span class="line">                num = num + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            f.close()</span><br><span class="line">            f2.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#以上为预处理文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="built_in">dir</span>):                      <span class="comment">#遍历该文件夹</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:                                      <span class="comment">#遍历刚获得的文件名files</span></span><br><span class="line">        (filename, extension) = os.path.splitext(file)      <span class="comment">#将文件名拆分为文件名与后缀</span></span><br><span class="line">        <span class="keyword">if</span> (extension == <span class="string">&#x27;.redotxt&#x27;</span>):                           <span class="comment">#判断该后缀是否为txt文件</span></span><br><span class="line">            name=filename+<span class="string">&#x27;.redotxt&#x27;</span></span><br><span class="line">            rename=filename+<span class="string">&#x27;处理.csv&#x27;</span></span><br><span class="line"></span><br><span class="line">            csv1=pd.read_csv(rename,encoding=<span class="string">&#x27;utf-16&#x27;</span>,sep=<span class="string">&#x27;【&#x27;</span>)</span><br><span class="line">            csv2=pd.read_csv(name,encoding=<span class="string">&#x27;utf-16&#x27;</span>,sep=<span class="string">&#x27;【&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            txt=<span class="string">&#x27;[原文件名] &#x27;</span>+filename</span><br><span class="line"></span><br><span class="line">            c = csv2.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(c):</span><br><span class="line">                <span class="keyword">if</span> pd.isnull(csv2.at[x,txt]):</span><br><span class="line">                    csv2.at[x,txt] = <span class="string">&#x27;&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            redo1=filename+<span class="string">&#x27;.redo1&#x27;</span></span><br><span class="line">            csv2.to_csv(redo1, encoding=<span class="string">&quot;utf-16&quot;</span>)</span><br><span class="line"></span><br><span class="line">            print(csv1.loc[<span class="keyword">lambda</span> csv1: csv1[<span class="string">&#x27;id&#x27;</span>] % <span class="number">4</span> == <span class="number">0</span>])</span><br><span class="line">            print(csv2)</span><br><span class="line"></span><br><span class="line">            csv3 = pd.read_csv(redo1,encoding=<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(c):</span><br><span class="line">                a = (x + <span class="number">1</span>) * <span class="number">4</span>-<span class="number">1</span></span><br><span class="line">                csv1.at[a,txt] = csv2.at[x,txt]</span><br><span class="line"></span><br><span class="line">            redo2=filename+<span class="string">&#x27;.willout&#x27;</span></span><br><span class="line">            csv1.to_csv(redo2, encoding=<span class="string">&quot;utf-16&quot;</span>,index=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            output1=filename+<span class="string">&#x27;.out&#x27;</span></span><br><span class="line">            f3 = <span class="built_in">open</span>(redo2, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line">            f4 = <span class="built_in">open</span>(output1, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            txt2 = f3.readlines()</span><br><span class="line">            num = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> txt2:</span><br><span class="line">                <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">                    x = x.replace(<span class="string">&#x27;id,&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">                    print(x)</span><br><span class="line">                    f4.write(x)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># regax=&#x27;[0-9]&#123;1,10&#125;\.0\,&#x27;</span></span><br><span class="line">                    <span class="comment"># regax = &#x27;[0-9]&#123;1,10&#125;\,&#x27;</span></span><br><span class="line">                    regax=[<span class="string">&#x27;[0-9]&#123;1,10&#125;\.0\,&#x27;</span>,<span class="string">&#x27;[0-9]&#123;1,10&#125;\,&#x27;</span>]</span><br><span class="line">                    <span class="keyword">for</span> sex <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                        x = re.sub(regax[sex],<span class="string">&#x27;&#x27;</span>, x)</span><br><span class="line">                    f4.write(x)</span><br><span class="line">                num = num + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            f3.close()</span><br><span class="line">            f4.close()</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&#x27;copy *.out &#x27;</span>+newdir4)</span><br><span class="line">os.system(<span class="string">&#x27;del *.out&#x27;</span>)</span><br><span class="line">os.system(<span class="string">&#x27;del *.redo1&#x27;</span>)</span><br><span class="line">os.system(<span class="string">&#x27;del *redotxt&#x27;</span>)</span><br><span class="line">os.system(<span class="string">&#x27;del *.willout&#x27;</span>)</span><br><span class="line"></span><br><span class="line">os.chdir(newdir4)</span><br><span class="line">os.system(<span class="string">&#x27;ren *.out *.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">os.chdir(dir1)</span><br><span class="line">os.system(<span class="string">&#x27;move &#x27;</span>+newdir4+<span class="string">&#x27; &#x27;</span>+dir1)</span><br><span class="line"></span><br><span class="line">shutil.rmtree(newdir1)</span><br><span class="line">shutil.rmtree(newdir2)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;标记文本&lt;/h1&gt;
&lt;div class=&quot;note warning flat&quot;&gt;&lt;p&gt;code中有很多地方可以简化，但为了中间方便debug，所以创建了多个文件夹进行检查&lt;/p&gt;
&lt;/div&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;tabl</summary>
      
    
    
    
    
    <category term="python" scheme="http://xcwnice.github.io/tags/python/"/>
    
    <category term="中文汉化" scheme="http://xcwnice.github.io/tags/%E4%B8%AD%E6%96%87%E6%B1%89%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>jcconv3</title>
    <link href="http://xcwnice.github.io/2021/04/18/%E9%9B%B6%E7%A2%8E%E7%82%B9/jcconv3/"/>
    <id>http://xcwnice.github.io/2021/04/18/%E9%9B%B6%E7%A2%8E%E7%82%B9/jcconv3/</id>
    <published>2021-04-18T01:25:25.000Z</published>
    <updated>2021-04-18T01:31:24.277Z</updated>
    
    <content type="html"><![CDATA[<h1>半角全角平片假名转换库</h1><blockquote><p>This module also treat ‘half/wide number’, ‘half/wide alphabet’.</p><p>Since 0.2.0, check_hira, check_kata, check_half functions were added. you can check if string consists of characters you specified.</p><p>IMPOTANT: In current version, this works only with utf-8 encoding.</p><p>Simple example of usage is followings</p></blockquote><p>一个可以将半角全角转换，平片假名转换的工具，唯一问题只支持utf-8编码的转换</p><p>下面是使用例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> jcconv3 <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(hira2kata(<span class="string">&#x27;あいうえお&#x27;</span>))   <span class="comment"># hiragana to katakana</span></span><br><span class="line">アイウエオ</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(kata2hira(<span class="string">&#x27;カタカナ&#x27;</span>))     <span class="comment"># katakana to hiragana</span></span><br><span class="line">かたかな</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(half2hira(<span class="string">&#x27;ﾊﾝｶｸｶﾀｶﾅ&#x27;</span>))      <span class="comment"># half-width kana to hiragana</span></span><br><span class="line">はんかくかたかな</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(half2wide(<span class="string">&#x27;hello jcconv&#x27;</span>)) <span class="comment"># half-width alphabet to wide-width</span></span><br><span class="line">ｈｅｌｌｏ ｊｃｃｏｎｖ</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(wide2half(<span class="string">&#x27;ＷＩＤＥ&#x27;</span>))     <span class="comment"># wide-width alphabet to half-width</span></span><br><span class="line">WIDE</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;半角全角平片假名转换库&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;This module also treat ‘half/wide number’, ‘half/wide alphabet’.&lt;/p&gt;
&lt;p&gt;Since 0.2.0, check_hira, check_</summary>
      
    
    
    
    <category term="零碎点" scheme="http://xcwnice.github.io/categories/%E9%9B%B6%E7%A2%8E%E7%82%B9/"/>
    
    
    <category term="python" scheme="http://xcwnice.github.io/tags/python/"/>
    
    <category term="文本处理" scheme="http://xcwnice.github.io/tags/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
    
    <category term="半角全角平片假名转换库" scheme="http://xcwnice.github.io/tags/%E5%8D%8A%E8%A7%92%E5%85%A8%E8%A7%92%E5%B9%B3%E7%89%87%E5%81%87%E5%90%8D%E8%BD%AC%E6%8D%A2%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>youtube-dl懒人脚本</title>
    <link href="http://xcwnice.github.io/2021/04/14/%E9%9B%B6%E7%A2%8E%E7%82%B9/youtube-dl/"/>
    <id>http://xcwnice.github.io/2021/04/14/%E9%9B%B6%E7%A2%8E%E7%82%B9/youtube-dl/</id>
    <published>2021-04-14T02:59:34.000Z</published>
    <updated>2021-04-15T07:36:49.449Z</updated>
    
    <content type="html"><![CDATA[<h1>youtube-dl脚本</h1><div class="note warning flat"><p>此为懒人批处理code</p></div><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">:<span class="built_in">start</span></span><br><span class="line"><span class="built_in">set</span> /p <span class="built_in">dir</span>=请输入保存路径：</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">dir</span>=<span class="variable">%dir:/=\%</span></span><br><span class="line"><span class="built_in">pushd</span> <span class="variable">%dir%</span></span><br><span class="line"><span class="keyword">if</span> /i <span class="keyword">not</span> <span class="variable">%dir%</span>==<span class="variable">%cd%</span> <span class="keyword">goto</span> :<span class="built_in">start</span></span><br><span class="line"><span class="built_in">echo</span> 保存路径：<span class="variable">%cd%</span></span><br><span class="line">:download</span><br><span class="line"><span class="built_in">set</span> /p input=请输入视频链接：</span><br><span class="line"><span class="built_in">set</span> input=<span class="variable">%input:&amp;=^^^&amp;%</span></span><br><span class="line">youtube-dl -F <span class="variable">%input%</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">errorlevel</span> <span class="number">1</span> <span class="keyword">goto</span> :download</span><br><span class="line"><span class="built_in">set</span> /p code=请输入视频格式编号：</span><br><span class="line">youtube-dl -f <span class="variable">%code%</span> <span class="variable">%input%</span></span><br><span class="line"><span class="keyword">goto</span> :download</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;youtube-dl脚本&lt;/h1&gt;
&lt;div class=&quot;note warning flat&quot;&gt;&lt;p&gt;此为懒人批处理code&lt;/p&gt;
&lt;/div&gt;
&lt;figure class=&quot;highlight bat&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="零碎点" scheme="http://xcwnice.github.io/categories/%E9%9B%B6%E7%A2%8E%E7%82%B9/"/>
    
    
    <category term="零碎点" scheme="http://xcwnice.github.io/tags/%E9%9B%B6%E7%A2%8E%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>ANIM社汉化记录备份</title>
    <link href="http://xcwnice.github.io/2021/04/06/gal%E6%B1%89%E5%8C%96%E8%AE%B0%E5%BD%95/ANIM%E7%A4%BE%E6%B1%89%E5%8C%96%E5%A4%87%E4%BB%BD/"/>
    <id>http://xcwnice.github.io/2021/04/06/gal%E6%B1%89%E5%8C%96%E8%AE%B0%E5%BD%95/ANIM%E7%A4%BE%E6%B1%89%E5%8C%96%E5%A4%87%E4%BB%BD/</id>
    <published>2021-04-06T10:22:05.000Z</published>
    <updated>2021-04-06T10:22:20.139Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="4181241472fde66895f21ce112601f49c1f407d333846d033291ceee1a333f46"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这里有东西被加密了，需要输入密码查看哦。</summary>
    
    
    
    <category term="加密目录" scheme="http://xcwnice.github.io/categories/%E5%8A%A0%E5%AF%86%E7%9B%AE%E5%BD%95/"/>
    
    <category term="中文汉化" scheme="http://xcwnice.github.io/categories/%E5%8A%A0%E5%AF%86%E7%9B%AE%E5%BD%95/%E4%B8%AD%E6%96%87%E6%B1%89%E5%8C%96/"/>
    
    
    <category term="python" scheme="http://xcwnice.github.io/tags/python/"/>
    
    <category term="中文汉化" scheme="http://xcwnice.github.io/tags/%E4%B8%AD%E6%96%87%E6%B1%89%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>dos常用指令</title>
    <link href="http://xcwnice.github.io/2021/04/05/%E9%9B%B6%E7%A2%8E%E7%82%B9/dos%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>http://xcwnice.github.io/2021/04/05/%E9%9B%B6%E7%A2%8E%E7%82%B9/dos%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</id>
    <published>2021-04-05T01:31:34.000Z</published>
    <updated>2021-04-06T03:18:52.676Z</updated>
    
    <content type="html"><![CDATA[<h1>Dos常用指令</h1><div class="note info flat"><p>这里只是提供一些用法</p></div><h2 id></h2><h2 id="利用dos清除难以清除的文件夹">利用dos清除难以清除的文件夹</h2><blockquote><p>原理: 这是利用了UNC路径的一个特例。UNC路径就是符合 \servername\sharename 格式，其中 servername 是服务器名，sharename 是共享资源的名称。?是统配符，表示匹配0个或1个任意字符。使用UNC路径不会捡测路径中的保留字设备名称等，因此可以用这种方法来删除特殊文件或目录。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">echo 确定删除你所选中的文件？</span><br><span class="line">pause</span><br><span class="line">DEL &#x2F;F &#x2F;A \\?\%1</span><br><span class="line">RD &#x2F;S &#x2F;Q \\?\%1</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Dos常用指令&lt;/h1&gt;
&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;这里只是提供一些用法&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id&gt;&lt;/h2&gt;
&lt;h2 id=&quot;利用dos清除难以清除的文件夹&quot;&gt;利用dos清除难以清除的文件夹&lt;/h2&gt;
&lt;blockquote</summary>
      
    
    
    
    <category term="dos" scheme="http://xcwnice.github.io/categories/dos/"/>
    
    
    <category term="dos" scheme="http://xcwnice.github.io/tags/dos/"/>
    
  </entry>
  
  <entry>
    <title>waffle报错记录分析</title>
    <link href="http://xcwnice.github.io/2021/04/02/gal%E6%B1%89%E5%8C%96%E8%AE%B0%E5%BD%95/waffle%E6%8A%A5%E9%94%99%E8%AE%B0%E5%BD%95%E5%88%86%E6%9E%90/"/>
    <id>http://xcwnice.github.io/2021/04/02/gal%E6%B1%89%E5%8C%96%E8%AE%B0%E5%BD%95/waffle%E6%8A%A5%E9%94%99%E8%AE%B0%E5%BD%95%E5%88%86%E6%9E%90/</id>
    <published>2021-04-02T01:22:05.000Z</published>
    <updated>2021-03-31T12:31:47.026Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="5916b89ab288d6153f74ec79788955ed5233642284aadb1e5e79be97888cd190">03936f7d4a6f4d8cf2203a535bf2a98503c90495dcb368c08333383165239b87e983fb8da396c461ce464802fed86ec3a3d2cad738984299d04d07ecbe11f7071dd7794f493ca29208c9ced7c35fa96a7e95f91f532aa1da456246b036293c4a6d20a32ab669adc54a0f8c71fb4cee376930ab5d263fa925f2a56baef60667c7389e9f859d7cf403a1493c6b233acb5587c6d2e6f444b4b7201b6ee38855db2e5c4b551a0b1a75f882a8fbdc5f688d228805eaee860a6983ad8a8933c27b6a48a35be1077c57fd8ea2050511251dbba53a442879bbe6803f4da10e9ee0e30037b2d6415f12099a164f71c3862e59a8745cbc25fc154eb7ea4ae1a13b6d483053c5c2705abcf3b0fd3ee18825a1b9fa54f6076cc6eb5b8527f1f536c2bbd502ba</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这里有东西被加密了，需要输入密码查看哦。</summary>
    
    
    
    <category term="加密目录" scheme="http://xcwnice.github.io/categories/%E5%8A%A0%E5%AF%86%E7%9B%AE%E5%BD%95/"/>
    
    <category term="中文汉化" scheme="http://xcwnice.github.io/categories/%E5%8A%A0%E5%AF%86%E7%9B%AE%E5%BD%95/%E4%B8%AD%E6%96%87%E6%B1%89%E5%8C%96/"/>
    
    
    <category term="中文汉化" scheme="http://xcwnice.github.io/tags/%E4%B8%AD%E6%96%87%E6%B1%89%E5%8C%96/"/>
    
    <category term="waffle" scheme="http://xcwnice.github.io/tags/waffle/"/>
    
  </entry>
  
  <entry>
    <title>linux使用记录</title>
    <link href="http://xcwnice.github.io/2021/03/28/%E9%9B%B6%E7%A2%8E%E7%82%B9/linux%E4%BD%BF%E7%94%A8/"/>
    <id>http://xcwnice.github.io/2021/03/28/%E9%9B%B6%E7%A2%8E%E7%82%B9/linux%E4%BD%BF%E7%94%A8/</id>
    <published>2021-03-28T03:10:34.000Z</published>
    <updated>2021-03-28T15:14:59.710Z</updated>
    
    <content type="html"><![CDATA[<h1>更换软件中心</h1>  <div class="note warning flat"><p>注意此项非必要，可以跳过更换软件中心这步，记录只是为了方便要换的人</p></div><blockquote><p>Ubuntu 20.04 默认把软件中心换成了 snap，用一下命令来可以换回原来的软件中心</p></blockquote>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ubuntu-software</span><br><span class="line">sudo snap remove snap-store</span><br><span class="line">sudo apt purge snapd</span><br></pre></td></tr></table></figure><h1>环境变量编辑</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gedit ~&#x2F;.bashrc</span><br><span class="line">source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;更换软件中心&lt;/h1&gt;
  &lt;div class=&quot;note warning flat&quot;&gt;&lt;p&gt;注意此项非必要，可以跳过更换软件中心这步，记录只是为了方便要换的人&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Ubuntu 20.04 默认把软件中心换成了 sna</summary>
      
    
    
    
    <category term="linux" scheme="http://xcwnice.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="http://xcwnice.github.io/tags/linux/"/>
    
  </entry>
  
</feed>
